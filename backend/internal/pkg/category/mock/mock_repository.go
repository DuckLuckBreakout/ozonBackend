// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DuckLuckBreakout/web/backend/internal/pkg/category (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/DuckLuckBreakout/web/backend/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetBordersOfBranch mocks base method.
func (m *MockRepository) GetBordersOfBranch(arg0 uint64) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBordersOfBranch", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBordersOfBranch indicates an expected call of GetBordersOfBranch.
func (mr *MockRepositoryMockRecorder) GetBordersOfBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBordersOfBranch", reflect.TypeOf((*MockRepository)(nil).GetBordersOfBranch), arg0)
}

// GetCategoriesByLevel mocks base method.
func (m *MockRepository) GetCategoriesByLevel(arg0 uint64) ([]*models.CategoriesCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesByLevel", arg0)
	ret0, _ := ret[0].([]*models.CategoriesCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesByLevel indicates an expected call of GetCategoriesByLevel.
func (mr *MockRepositoryMockRecorder) GetCategoriesByLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesByLevel", reflect.TypeOf((*MockRepository)(nil).GetCategoriesByLevel), arg0)
}

// GetNextLevelCategories mocks base method.
func (m *MockRepository) GetNextLevelCategories(arg0 uint64) ([]*models.CategoriesCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextLevelCategories", arg0)
	ret0, _ := ret[0].([]*models.CategoriesCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextLevelCategories indicates an expected call of GetNextLevelCategories.
func (mr *MockRepositoryMockRecorder) GetNextLevelCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextLevelCategories", reflect.TypeOf((*MockRepository)(nil).GetNextLevelCategories), arg0)
}

// GetPathToCategory mocks base method.
func (m *MockRepository) GetPathToCategory(arg0 uint64) ([]*models.CategoriesCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathToCategory", arg0)
	ret0, _ := ret[0].([]*models.CategoriesCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPathToCategory indicates an expected call of GetPathToCategory.
func (mr *MockRepositoryMockRecorder) GetPathToCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathToCategory", reflect.TypeOf((*MockRepository)(nil).GetPathToCategory), arg0)
}
