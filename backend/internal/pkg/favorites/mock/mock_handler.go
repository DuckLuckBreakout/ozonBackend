// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DuckLuckBreakout/web/backend/internal/pkg/favorites (interfaces: Handler)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// AddProductToFavorites mocks base method.
func (m *MockHandler) AddProductToFavorites(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddProductToFavorites", arg0, arg1)
}

// AddProductToFavorites indicates an expected call of AddProductToFavorites.
func (mr *MockHandlerMockRecorder) AddProductToFavorites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToFavorites", reflect.TypeOf((*MockHandler)(nil).AddProductToFavorites), arg0, arg1)
}

// DeleteProductFromFavorites mocks base method.
func (m *MockHandler) DeleteProductFromFavorites(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteProductFromFavorites", arg0, arg1)
}

// DeleteProductFromFavorites indicates an expected call of DeleteProductFromFavorites.
func (mr *MockHandlerMockRecorder) DeleteProductFromFavorites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductFromFavorites", reflect.TypeOf((*MockHandler)(nil).DeleteProductFromFavorites), arg0, arg1)
}

// GetListPreviewFavorites mocks base method.
func (m *MockHandler) GetListPreviewFavorites(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetListPreviewFavorites", arg0, arg1)
}

// GetListPreviewFavorites indicates an expected call of GetListPreviewFavorites.
func (mr *MockHandlerMockRecorder) GetListPreviewFavorites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPreviewFavorites", reflect.TypeOf((*MockHandler)(nil).GetListPreviewFavorites), arg0, arg1)
}

// GetUserFavorites mocks base method.
func (m *MockHandler) GetUserFavorites(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUserFavorites", arg0, arg1)
}

// GetUserFavorites indicates an expected call of GetUserFavorites.
func (mr *MockHandlerMockRecorder) GetUserFavorites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFavorites", reflect.TypeOf((*MockHandler)(nil).GetUserFavorites), arg0, arg1)
}
