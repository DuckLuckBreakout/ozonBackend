// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DuckLuckBreakout/ozonBackend/internal/pkg/product (interfaces: UseCase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/DuckLuckBreakout/ozonBackend/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetProductById mocks base method.
func (m *MockUseCase) GetProductById(arg0 uint64) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockUseCaseMockRecorder) GetProductById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockUseCase)(nil).GetProductById), arg0)
}

// GetProductRecommendationsById mocks base method.
func (m *MockUseCase) GetProductRecommendationsById(arg0 uint64, arg1 *models.PaginatorRecommendations) ([]*models.RecommendationProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductRecommendationsById", arg0, arg1)
	ret0, _ := ret[0].([]*models.RecommendationProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductRecommendationsById indicates an expected call of GetProductRecommendationsById.
func (mr *MockUseCaseMockRecorder) GetProductRecommendationsById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductRecommendationsById", reflect.TypeOf((*MockUseCase)(nil).GetProductRecommendationsById), arg0, arg1)
}

// GetRangeProducts mocks base method.
func (m *MockUseCase) GetRangeProducts(arg0 *models.PaginatorProducts) (*models.RangeProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeProducts", arg0)
	ret0, _ := ret[0].(*models.RangeProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRangeProducts indicates an expected call of GetRangeProducts.
func (mr *MockUseCaseMockRecorder) GetRangeProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeProducts", reflect.TypeOf((*MockUseCase)(nil).GetRangeProducts), arg0)
}

// SearchRangeProducts mocks base method.
func (m *MockUseCase) SearchRangeProducts(arg0 *models.SearchQuery) (*models.RangeProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRangeProducts", arg0)
	ret0, _ := ret[0].(*models.RangeProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRangeProducts indicates an expected call of SearchRangeProducts.
func (mr *MockUseCaseMockRecorder) SearchRangeProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRangeProducts", reflect.TypeOf((*MockUseCase)(nil).SearchRangeProducts), arg0)
}
