// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DuckLuckBreakout/web/backend/internal/pkg/notification (interfaces: UseCase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/DuckLuckBreakout/web/backend/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// SubscribeUser mocks base method.
func (m *MockUseCase) SubscribeUser(arg0 uint64, arg1 *models.NotificationCredentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeUser indicates an expected call of SubscribeUser.
func (mr *MockUseCaseMockRecorder) SubscribeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeUser", reflect.TypeOf((*MockUseCase)(nil).SubscribeUser), arg0, arg1)
}

// UnsubscribeUser mocks base method.
func (m *MockUseCase) UnsubscribeUser(arg0 uint64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeUser indicates an expected call of UnsubscribeUser.
func (mr *MockUseCaseMockRecorder) UnsubscribeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeUser", reflect.TypeOf((*MockUseCase)(nil).UnsubscribeUser), arg0, arg1)
}
