// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DuckLuckBreakout/ozonBackend/services/auth/pkg/user (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/DuckLuckBreakout/ozonBackend/services/auth/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddProfile mocks base method.
func (m *MockRepository) AddProfile(arg0 *models.AuthUser) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProfile", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProfile indicates an expected call of AddProfile.
func (mr *MockRepositoryMockRecorder) AddProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfile", reflect.TypeOf((*MockRepository)(nil).AddProfile), arg0)
}

// SelectUserByEmail mocks base method.
func (m *MockRepository) SelectUserByEmail(arg0 string) (*models.AuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByEmail", arg0)
	ret0, _ := ret[0].(*models.AuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByEmail indicates an expected call of SelectUserByEmail.
func (mr *MockRepositoryMockRecorder) SelectUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByEmail", reflect.TypeOf((*MockRepository)(nil).SelectUserByEmail), arg0)
}
