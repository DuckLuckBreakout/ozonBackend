// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DuckLuckBreakout/ozonBackend/services/cart/pkg/cart (interfaces: UseCase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/DuckLuckBreakout/ozonBackend/services/cart/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockUseCase) AddProduct(arg0 uint64, arg1 *models.CartArticle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockUseCaseMockRecorder) AddProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockUseCase)(nil).AddProduct), arg0, arg1)
}

// ChangeProduct mocks base method.
func (m *MockUseCase) ChangeProduct(arg0 uint64, arg1 *models.CartArticle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeProduct indicates an expected call of ChangeProduct.
func (mr *MockUseCaseMockRecorder) ChangeProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeProduct", reflect.TypeOf((*MockUseCase)(nil).ChangeProduct), arg0, arg1)
}

// DeleteCart mocks base method.
func (m *MockUseCase) DeleteCart(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCart indicates an expected call of DeleteCart.
func (mr *MockUseCaseMockRecorder) DeleteCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCart", reflect.TypeOf((*MockUseCase)(nil).DeleteCart), arg0)
}

// DeleteProduct mocks base method.
func (m *MockUseCase) DeleteProduct(arg0 uint64, arg1 *models.ProductIdentifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockUseCaseMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockUseCase)(nil).DeleteProduct), arg0, arg1)
}

// GetPreviewCart mocks base method.
func (m *MockUseCase) GetPreviewCart(arg0 uint64) (*models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreviewCart", arg0)
	ret0, _ := ret[0].(*models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviewCart indicates an expected call of GetPreviewCart.
func (mr *MockUseCaseMockRecorder) GetPreviewCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviewCart", reflect.TypeOf((*MockUseCase)(nil).GetPreviewCart), arg0)
}
