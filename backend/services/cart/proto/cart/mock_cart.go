// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DuckLuckBreakout/ozonBackend/services/cart/proto/cart (interfaces: CartServiceClient)

// Package cart is a generated GoMock package.
package cart

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockCartServiceClient is a mock of CartServiceClient interface.
type MockCartServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceClientMockRecorder
}

// MockCartServiceClientMockRecorder is the mock recorder for MockCartServiceClient.
type MockCartServiceClientMockRecorder struct {
	mock *MockCartServiceClient
}

// NewMockCartServiceClient creates a new mock instance.
func NewMockCartServiceClient(ctrl *gomock.Controller) *MockCartServiceClient {
	mock := &MockCartServiceClient{ctrl: ctrl}
	mock.recorder = &MockCartServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartServiceClient) EXPECT() *MockCartServiceClientMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockCartServiceClient) AddProduct(arg0 context.Context, arg1 *ReqCartArticle, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProduct", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockCartServiceClientMockRecorder) AddProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockCartServiceClient)(nil).AddProduct), varargs...)
}

// ChangeProduct mocks base method.
func (m *MockCartServiceClient) ChangeProduct(arg0 context.Context, arg1 *ReqCartArticle, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeProduct", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeProduct indicates an expected call of ChangeProduct.
func (mr *MockCartServiceClientMockRecorder) ChangeProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeProduct", reflect.TypeOf((*MockCartServiceClient)(nil).ChangeProduct), varargs...)
}

// DeleteCart mocks base method.
func (m *MockCartServiceClient) DeleteCart(arg0 context.Context, arg1 *ReqUserId, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCart", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCart indicates an expected call of DeleteCart.
func (mr *MockCartServiceClientMockRecorder) DeleteCart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCart", reflect.TypeOf((*MockCartServiceClient)(nil).DeleteCart), varargs...)
}

// DeleteProduct mocks base method.
func (m *MockCartServiceClient) DeleteProduct(arg0 context.Context, arg1 *ReqProductIdentifier, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProduct", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockCartServiceClientMockRecorder) DeleteProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockCartServiceClient)(nil).DeleteProduct), varargs...)
}

// GetPreviewCart mocks base method.
func (m *MockCartServiceClient) GetPreviewCart(arg0 context.Context, arg1 *ReqUserId, arg2 ...grpc.CallOption) (*Cart, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPreviewCart", varargs...)
	ret0, _ := ret[0].(*Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviewCart indicates an expected call of GetPreviewCart.
func (mr *MockCartServiceClientMockRecorder) GetPreviewCart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviewCart", reflect.TypeOf((*MockCartServiceClient)(nil).GetPreviewCart), varargs...)
}
